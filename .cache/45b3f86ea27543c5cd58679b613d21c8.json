{"dependencies":[{"name":"./error","loc":{"line":16,"column":31}},{"name":"./metadata","loc":{"line":17,"column":31}},{"name":"./type","loc":{"line":18,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArgSpec = undefined;\nexports.validate = validate;\nexports.and_ = and_;\nexports.stringSpec = stringSpec;\nexports.uploadDataSpec = uploadDataSpec;\nexports.metadataSpec = metadataSpec;\nexports.nonNegativeNumberSpec = nonNegativeNumberSpec;\nexports.looseObjectSpec = looseObjectSpec;\nexports.nullFunctionSpec = nullFunctionSpec;\n\nvar _error = require(\"./error\");\n\nvar errorsExports = _interopRequireWildcard(_error);\n\nvar _metadata = require(\"./metadata\");\n\nvar MetadataUtils = _interopRequireWildcard(_metadata);\n\nvar _type = require(\"./type\");\n\nvar type = _interopRequireWildcard(_type);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * @param name Name of the function.\n * @param specs Argument specs.\n * @param passed The actual arguments passed to the function.\n * @throws {fbs.Error} If the arguments are invalid.\n */\nfunction validate(name, specs, passed) {\n  var minArgs = specs.length;\n  var maxArgs = specs.length;\n  for (var i = 0; i < specs.length; i++) {\n    if (specs[i].optional) {\n      minArgs = i;\n      break;\n    }\n  }\n  var validLength = minArgs <= passed.length && passed.length <= maxArgs;\n  if (!validLength) {\n    throw errorsExports.invalidArgumentCount(minArgs, maxArgs, name, passed.length);\n  }\n  for (var i = 0; i < passed.length; i++) {\n    try {\n      specs[i].validator(passed[i]);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw errorsExports.invalidArgument(i, name, e.message);\n      } else {\n        throw errorsExports.invalidArgument(i, name, e);\n      }\n    }\n  }\n}\n/**\n * @struct\n */\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ArgSpec = /** @class */function () {\n  function ArgSpec(validator, opt_optional) {\n    var self = this;\n    this.validator = function (p) {\n      if (self.optional && !type.isJustDef(p)) {\n        return;\n      }\n      validator(p);\n    };\n    this.optional = !!opt_optional;\n  }\n  return ArgSpec;\n}();\nexports.ArgSpec = ArgSpec;\nfunction and_(v1, v2) {\n  return function (p) {\n    v1(p);\n    v2(p);\n  };\n}\nfunction stringSpec(opt_validator, opt_optional) {\n  function stringValidator(p) {\n    if (!type.isString(p)) {\n      throw 'Expected string.';\n    }\n  }\n  var validator;\n  if (opt_validator) {\n    validator = and_(stringValidator, opt_validator);\n  } else {\n    validator = stringValidator;\n  }\n  return new ArgSpec(validator, opt_optional);\n}\nfunction uploadDataSpec() {\n  function validator(p) {\n    var valid = p instanceof Uint8Array || p instanceof ArrayBuffer || type.isNativeBlobDefined() && p instanceof Blob;\n    if (!valid) {\n      throw 'Expected Blob or File.';\n    }\n  }\n  return new ArgSpec(validator);\n}\nfunction metadataSpec(opt_optional) {\n  return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);\n}\nfunction nonNegativeNumberSpec() {\n  function validator(p) {\n    var valid = type.isNumber(p) && p >= 0;\n    if (!valid) {\n      throw 'Expected a number 0 or greater.';\n    }\n  }\n  return new ArgSpec(validator);\n}\nfunction looseObjectSpec(opt_validator, opt_optional) {\n  function validator(p) {\n    var isLooseObject = p === null || type.isDef(p) && p instanceof Object;\n    if (!isLooseObject) {\n      throw 'Expected an Object.';\n    }\n    if (opt_validator !== undefined && opt_validator !== null) {\n      opt_validator(p);\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\nfunction nullFunctionSpec(opt_optional) {\n  function validator(p) {\n    var valid = p === null || type.isFunction(p);\n    if (!valid) {\n      throw 'Expected a Function.';\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\n//# sourceMappingURL=args.js.map"},"hash":"c274dd1c106fcfe18ebf6d681e0e23ea"}